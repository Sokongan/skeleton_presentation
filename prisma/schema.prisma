generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  username  String     @unique
  password  String
  firstName String
  lastName  String
  email     String     @unique
  active    Boolean    @default(true)
  createdAt DateTime   @default(now())
  roles     Role[]     @relation("User Roles")
  UserRole  UserRole[]
}

model Role {
  id             String           @id @default(cuid())
  name           String           @unique
  description    String?
  users          User[]           @relation("User Roles")
  permissions    Permission[]     @relation("RolePermissions")
  UserRole       UserRole[]
  RolePermission RolePermission[]
}

model Permission {
  id             String           @id @default(cuid())
  name           String           @unique
  description    String?
  roles          Role[]           @relation("RolePermissions")
  RolePermission RolePermission[]
}

model UserRole {
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model RolePermission {
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
}

model Employee {
  id                String    @id @default(cuid())
  employeeId        String    @unique
  firstName         String
  middleName        String?
  lastName          String
  suffix            String?
  gender           String?
  birthplace       String?
  birthdate        DateTime?
  civilStatus      String?
  bloodType        String?
  citizenship      String?
  religion         String?
  mobileNo         String?
  email            String?
  weight           Float?
  height           Float?
  residentialAddress String?
  position         String?
  department       String?
  bio              String?    @db.Text

  // Relations
  familyBackground   FamilyBackground?
  officeDetails     OfficeDetails?
  educationRecords  EducationRecord[]
  eligibilityRecords EligibilityRecord[]
  workExperiences   WorkExperience[]
  trainingPrograms  TrainingProgram[]
  references        Reference[]
  attachments       Attachment[]
}

model FamilyBackground {
  id                    String   @id @default(cuid())
  employeeId            String   @unique
  spouseLastname        String?
  spouseFirstname       String?
  spouseMiddlename      String?
  spouseOccupation      String?
  spouseEmployer        String?
  spouseTelephone       String?
  spouseEmployerAddress String?
  fatherLastname        String?
  fatherFirstname       String?
  fatherMiddlename      String?
  motherLastname        String?
  motherFirstname       String?
  motherMiddlename      String?
  
  employee              Employee @relation(fields: [employeeId], references: [id])
}

model OfficeDetails {
  id                        String   @id @default(cuid())
  employeeId                String   @unique
  plantilla                 String?
  office                   String?
  detailedTo               String?
  directLine               String?
  local                    String?
  facsimile                String?
  salaryGrade              String?
  step                     String?
  premiums                 String?
  tin                      String?
  gsis                     String?
  phic                     String?
  pagibig                  String?
  umid                     String?
  otherGovAgency           DateTime?
  dojAppointment           DateTime?
  presentPositionAppointment DateTime?
  assumptionPresentPosition DateTime?
  noGap                    String?
  terminationDate          DateTime?
  
  employee                 Employee @relation(fields: [employeeId], references: [id])
}

model EducationRecord {
  id            String   @id @default(cuid())
  employeeId    String
  level         String
  school        String
  course        String?
  yearGraduated String?
  units         String?
  yearFrom      String?
  yearTo        String?
  honors        String?
  
  employee      Employee @relation(fields: [employeeId], references: [id])
}

model EligibilityRecord {
  id            String    @id @default(cuid())
  employeeId    String
  eligibility   String
  rating        String?
  examDate      DateTime?
  place         String?
  licenseNumber String?
  releaseDate   DateTime?
  
  employee      Employee @relation(fields: [employeeId], references: [id])
}

model WorkExperience {
  id            String   @id @default(cuid())
  employeeId    String
  position      String
  company       String
  startDate     DateTime
  endDate       DateTime?
  salary        Float?
  salaryGrade   String?
  appointmentStatus String?
  isGovernmentService Boolean @default(false)
  
  employee      Employee @relation(fields: [employeeId], references: [id])
}

model TrainingProgram {
  id            String   @id @default(cuid())
  employeeId    String
  title         String
  type          String?
  hours         Int?
  conductor     String?
  venue         String?
  startDate     DateTime
  endDate       DateTime
  
  employee      Employee @relation(fields: [employeeId], references: [id])
}

model Reference {
  id            String   @id @default(cuid())
  employeeId    String
  name          String
  position      String?
  company       String?
  contactNumber String?
  email         String?
  
  employee      Employee @relation(fields: [employeeId], references: [id])
}

model Attachment {
  id            String   @id @default(cuid())
  employeeId    String
  fileName      String
  fileSize      Int
  fileType      String
  uploadDate    DateTime
  filePath      String
  storageUrl    String
  employee      Employee @relation(fields: [employeeId], references: [id])
}
